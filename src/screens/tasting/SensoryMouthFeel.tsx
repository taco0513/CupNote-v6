import React, { useState, useCallback, useMemo, useRef } from 'react';
import {
  View,
  Text,
  ScrollView,
  TouchableOpacity,
  StyleSheet,
  Alert,
  Dimensions,
} from 'react-native';
import { useNavigation, useRoute } from '@react-navigation/native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { colors, spacing, typography } from '../../styles/theme';
import { Card, Button, ProgressBar, Badge, Slider } from '../../components/common';
import useStore from '../../store/useStore';
import type { TastingFlowNavigationProp, TastingFlowRouteProp } from '../../types/navigation';

const { width: SCREEN_WIDTH } = Dimensions.get('window');

// 6Í∞ú ÌèâÍ∞Ä Ìï≠Î™© Ï†ïÏùò (SCA Í∏∞Ï§Ä Ï†ÅÏùë)
const EVALUATION_ITEMS = {
  body: {
    name: 'Î∞îÎîîÍ∞ê',
    emoji: 'üíß',
    description: 'Ïª§ÌîºÏùò Î¨¥Í≤åÍ∞êÍ≥º ÏßàÍ∞ê',
    color: '#2196F3',
    labels: {
      1: 'Î¨º Í∞ôÏù¥ Í∞ÄÎ≤ºÏõÄ',
      2: 'ÏïΩÍ∞Ñ Í∞ÄÎ≤ºÏö¥ Î∞îÎîîÍ∞ê',
      3: 'Ï†ÅÎãπÌïú Î∞îÎîîÍ∞ê',
      4: 'Ï∂©Ïã§Ìïú Î∞îÎîîÍ∞ê',
      5: 'ÌÅ¨Î¶¨ÎØ∏ÌïòÍ≥† Î¨µÏßÅÌï®'
    }
  },
  acidity: {
    name: 'ÏÇ∞ÎØ∏',
    emoji: 'üçã',
    description: 'Î∞ùÍ≥† ÏÉÅÏæåÌïú ÏÇ∞ÎØ∏Ïùò Í∞ïÎèÑ',
    color: '#4CAF50',
    labels: {
      1: 'ÏÇ∞ÎØ∏ Í±∞Ïùò ÏóÜÏùå',
      2: 'ÏïΩÌïú ÏÇ∞ÎØ∏',
      3: 'Ï†ÅÎãπÌïú ÏÇ∞ÎØ∏',
      4: 'Ï¢ãÏùÄ ÏÇ∞ÎØ∏',
      5: 'Í∞ïÌïòÍ≥† Î≥µÏû°Ìïú ÏÇ∞ÎØ∏'
    }
  },
  sweetness: {
    name: 'Îã®Îßõ',
    emoji: 'üçØ',
    description: 'ÏûêÏó∞Ïä§Îü¨Ïö¥ Îã®ÎßõÏùò Ï†ïÎèÑ',
    color: '#FF9800',
    labels: {
      1: 'Îã®Îßõ Î∂ÄÏ°±',
      2: 'ÏïΩÌïú Îã®Îßõ',
      3: 'ÏùÄÏùÄÌïú ÏûêÏó∞ Îã®Îßõ',
      4: 'ÌíçÎ∂ÄÌïú Îã®Îßõ',
      5: 'Îß§Ïö∞ ÌíçÎ∂ÄÌïú Îã®Îßõ'
    }
  },
  finish: {
    name: 'Ïó¨Ïö¥',
    emoji: 'üå¨Ô∏è',
    description: 'ÎßõÏù¥ ÏßÄÏÜçÎêòÎäî ÏãúÍ∞ÑÍ≥º ÌíàÏßà',
    color: '#9C27B0',
    labels: {
      1: 'Ïó¨Ïö¥Ïù¥ ÏßßÏùå',
      2: 'ÏßßÏùÄ Ïó¨Ïö¥',
      3: 'Ï†ÅÎãπÌïú Ïó¨Ïö¥',
      4: 'Í∏∏Í≥† Ï¢ãÏùÄ Ïó¨Ïö¥',
      5: 'Îß§Ïö∞ Í∏∏Í≥† Î≥µÌï©Ï†ÅÏù∏ Ïó¨Ïö¥'
    }
  },
  bitterness: {
    name: 'Ïì¥Îßõ',
    emoji: 'üå∞',
    description: 'Ïì¥ÎßõÏùò Í∞ïÎèÑÏôÄ ÌíàÏßà',
    color: '#795548',
    labels: {
      1: 'Ïì¥Îßõ Í±∞Ïùò ÏóÜÏùå',
      2: 'ÏïΩÌïú Ïì¥Îßõ',
      3: 'Í∑†ÌòïÏû°Ìûå Ïì¥Îßõ',
      4: 'Ï¢ãÏùÄ Ïì¥Îßõ',
      5: 'Í∞ïÌïòÏßÄÎßå Í≥†Í∏âÏä§Îü¨Ïö¥ Ïì¥Îßõ'
    }
  },
  balance: {
    name: 'Î∞∏Îü∞Ïä§',
    emoji: '‚öñÔ∏è',
    description: 'Ï†ÑÏ≤¥Ï†ÅÏù∏ Ï°∞ÌôîÏôÄ Í∑†Ìòï',
    color: '#FFC107',
    labels: {
      1: 'Î∂àÍ∑†Ìòï',
      2: 'ÏïΩÍ∞Ñ Î∂àÍ∑†Ìòï',
      3: 'Î¨¥ÎÇúÌïú Í∑†ÌòïÍ∞ê',
      4: 'Ï¢ãÏùÄ Í∑†ÌòïÍ∞ê',
      5: 'ÏôÑÎ≤ΩÌïú Ï°∞Ìôî'
    }
  }
};

// Í∏∞Î≥∏Í∞í ÏÑ§Ï†ï
const DEFAULT_SCORES = {
  body: 3,
  acidity: 3,
  sweetness: 3,
  finish: 3,
  bitterness: 3,
  balance: 3,
};


export const SensoryMouthFeel: React.FC = () => {
  const navigation = useNavigation<TastingFlowNavigationProp>();
  const route = useRoute<TastingFlowRouteProp<'SensoryMouthFeel'>>();
  const { setTastingFlowData } = useStore();

  // ÏÉÅÌÉú Í¥ÄÎ¶¨
  const [scores, setScores] = useState(DEFAULT_SCORES);

  // Ï†êÏàò ÏóÖÎç∞Ïù¥Ìä∏ Ìï∏Îì§Îü¨
  const handleScoreChange = useCallback((category: keyof typeof scores, value: number) => {
    setScores(prev => ({
      ...prev,
      [category]: Math.round(value) // Ï†ïÏàòÍ∞íÏúºÎ°úÎßå Ï†ÄÏû•
    }));
  }, []);


  // Í±¥ÎÑàÎõ∞Í∏∞ Ìï∏Îì§Îü¨
  const handleSkip = useCallback(() => {
    setTastingFlowData({ ratings: {
      acidity: 0,
      sweetness: 0,
      bitterness: 0,
      body: 0,
      balance: 0,
      cleanliness: 0,
      aftertaste: 0,
    }});
    navigation.navigate('PersonalNotes', route.params);
  }, [navigation, route.params, setTastingFlowData]);

  // Îã§Ïùå Î≤ÑÌäº Ìï∏Îì§Îü¨
  const handleNext = useCallback(() => {
    setTastingFlowData({ ratings: {
      acidity: scores.acidity || 0,
      sweetness: scores.sweetness || 0,
      bitterness: scores.bitterness || 0,
      body: scores.body || 0,
      balance: scores.balance || 0,
      cleanliness: scores.finish || 0,
      aftertaste: scores.finish || 0,
    }});
    navigation.navigate('PersonalNotes', route.params);
  }, [scores, navigation, route.params, setTastingFlowData]);


  // Ïä¨ÎùºÏù¥Îçî ÏïÑÏù¥ÌÖú Î†åÎçîÎßÅ
  const renderSliderItem = (key: keyof typeof scores) => {
    const item = EVALUATION_ITEMS[key];
    const value = scores[key];
    
    // Safe value display for Badge
    const safeValue = typeof value === 'number' && !isNaN(value) ? value : 3;
    const displayValue = safeValue.toString();

    return (
      <Card key={key} style={styles.sliderContainer}>
        <View style={styles.sliderHeader}>
          <View style={styles.sliderTitle}>
            <Text style={styles.sliderEmoji}>{item.emoji}</Text>
            <Text style={styles.sliderName}>{item.name}</Text>
          </View>
          <Badge 
            text={displayValue} 
            variant={item.color === colors.primary ? 'primary' : 'default'}
          />
        </View>
        <Text style={styles.sliderDescription}>{item.description}</Text>
        <Slider
          value={safeValue}
          onValueChange={(val) => handleScoreChange(key, val)}
          min={1}
          max={5}
          step={1}
          color={item.color}
          style={styles.slider}
        />
        <View style={styles.sliderLabels}>
          <Text style={styles.sliderLabelMin}>ÏïΩÌï®</Text>
          <Text style={styles.sliderLabelCurrent}>
            {item.labels[safeValue] || item.labels[3]}
          </Text>
          <Text style={styles.sliderLabelMax}>Í∞ïÌï®</Text>
        </View>
      </Card>
    );
  };

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView
        contentContainerStyle={styles.scrollContent}
        showsVerticalScrollIndicator={false}
      >
        {/* Ìó§Îçî */}
        <View style={styles.header}>
          <ProgressBar 
            progress={route.params.mode === 'cafe' ? 0.83 : 0.86} 
            style={styles.progressBar} 
          />
          <View style={styles.headerContent}>
            <Text style={styles.title}>ÏàòÏπò ÌèâÍ∞Ä</Text>
            <Badge 
              text={route.params.mode === 'cafe' ? '‚òï Ïπ¥Ìéò Î™®Îìú' : 'üè† ÌôàÏπ¥Ìéò Î™®Îìú'}
              variant={route.params.mode === 'cafe' ? 'primary' : 'info'}
            />
          </View>
        </View>

        {/* ÏïàÎÇ¥ Î©îÏãúÏßÄ */}
        <Card style={styles.guideSection}>
          <Text style={styles.guideTitle}>‚òï Ïª§ÌîºÏùò ÎßàÏö∞Ïä§ÌïÑÏùÑ ÌèâÍ∞ÄÌï¥Ï£ºÏÑ∏Ïöî</Text>
          <Text style={styles.guideSubtitle}>1Ï†ê(ÏïΩÌï®) ~ 5Ï†ê(Í∞ïÌï®)</Text>
        </Card>

        {/* Ïä¨ÎùºÏù¥Îçî ÏÑπÏÖò */}
        <View style={styles.slidersSection}>
          {Object.keys(scores).map((key) => renderSliderItem(key as keyof typeof scores))}
        </View>
      </ScrollView>

      {/* ÌïòÎã® Î≤ÑÌäº */}
      <View style={styles.footer}>
        <View style={styles.footerButtons}>
          <Button
            title="Í±¥ÎÑàÎõ∞Í∏∞"
            onPress={handleSkip}
            variant="secondary"
            size="medium"
            style={styles.skipFooterButton}
          />
          <Button
            title="Îã§Ïùå"
            onPress={handleNext}
            variant="primary"
            size="large"
            style={styles.nextFooterButton}
          />
        </View>
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: colors.background,
  },
  scrollContent: {
    paddingBottom: spacing.xxl,
  },
  header: {
    paddingHorizontal: spacing.lg,
    paddingTop: spacing.md,
    paddingBottom: spacing.lg,
  },
  progressBar: {
    marginBottom: spacing.lg,
  },
  headerContent: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  title: {
    fontSize: typography.fontSize.xl,
    fontWeight: typography.fontWeight.bold as any,
    color: colors.text.primary,
  },
  guideSection: {
    marginHorizontal: spacing.lg,
    marginBottom: spacing.xl,
    padding: spacing.lg,
  },
  guideTitle: {
    fontSize: typography.fontSize.lg,
    fontWeight: typography.fontWeight.semibold as any,
    color: colors.text.primary,
    marginBottom: spacing.xs,
  },
  guideSubtitle: {
    fontSize: typography.fontSize.sm,
    color: colors.gray[600],
  },
  slidersSection: {
    paddingHorizontal: spacing.lg,
    gap: spacing.lg,
  },
  sliderContainer: {
    marginBottom: spacing.md,
    padding: spacing.lg,
  },
  sliderHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: spacing.xs,
  },
  sliderTitle: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: spacing.sm,
  },
  sliderEmoji: {
    fontSize: 20,
  },
  sliderName: {
    fontSize: typography.fontSize.md,
    fontWeight: typography.fontWeight.medium as any,
    color: colors.text.primary,
  },
  sliderDescription: {
    fontSize: typography.fontSize.sm,
    color: colors.gray[600],
    marginBottom: spacing.md,
  },
  slider: {
    marginBottom: spacing.sm,
  },
  sliderLabels: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: spacing.xs,
  },
  sliderLabelMin: {
    fontSize: typography.fontSize.xs,
    color: colors.gray[500],
    flex: 1,
    textAlign: 'left',
  },
  sliderLabelCurrent: {
    fontSize: typography.fontSize.xs,
    color: colors.gray[700],
    fontWeight: typography.fontWeight.medium as any,
    flex: 2,
    textAlign: 'center',
  },
  sliderLabelMax: {
    fontSize: typography.fontSize.xs,
    color: colors.gray[500],
    flex: 1,
    textAlign: 'right',
  },
  footer: {
    paddingHorizontal: spacing.lg,
    paddingVertical: spacing.md,
    backgroundColor: colors.white,
    borderTopWidth: 1,
    borderTopColor: colors.gray[100],
  },
  footerButtons: {
    flexDirection: 'row',
    gap: spacing.sm,
  },
  skipFooterButton: {
    flex: 1,
  },
  nextFooterButton: {
    flex: 2,
  },
});

export default SensoryMouthFeel;